name: CMake

on:
  push:
    branches:
    - master
    - dev_v0.4
  pull_request:
    branches:
    - master

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Cache Boost Build
      uses: actions/cache@v2
      env:
        cache-name: cache-boost-build
      with:
        path: boost_1_76_0
        key: ${{ runner.os }}-boost-build

    - name: Download and build BOOST
      if: steps.cache-boost-build.outputs.cache-hit != 'true'
      run: |
        wget https://boostorg.jfrog.io/artifactory/main/release/1.76.0/source/boost_1_76_0.tar.gz >> /dev/null 2>&1
        tar xfz boost_1_76_0.tar.gz
        cd boost_1_76_0/
        ./bootstrap.sh --with-libraries=serialization,program_options
        ./b2
        cd ..

    - name: Install BOOST
      run: |
        cd boost_1_76_0/
        sudo ./b2 install >> /dev/null 2>&1
        cd ..

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Run benchmark test
      working-directory: ${{github.workspace}}/build
      run: ./testbench/FrankyCPP_v0.4_Bench

    - name: Run PERFT test
      working-directory: ${{github.workspace}}/build
      run: ./src/FrankyCPP_v0.4 --perft --endDepth=5
